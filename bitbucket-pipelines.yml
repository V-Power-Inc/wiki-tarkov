# Пайплайны битбакета
image: docker/compose:latest

options:
  docker: true

# Описание возможных тестов (Задаем Definitions для использования в анкорах)
definitions:
  steps:
    - step: &Build
        name: Build (Docker-compose up & composer-update)
        services:
          - docker
        caches:
          - docker
#        runs-on:
#          - self.hosted
#          - linux
        script:
          # Экспоритруем переменные зашитые в битбакет для развертки
          - echo "Экспоритруем переменные зашитые в битбакет для развертки"
          - echo DB_NAME=$DB_NAME > .env
          - echo DB_USER=$DB_USER >> .env
          - echo DB_PASSWORD=$DB_PASSWORD >> .env

          # Build docker containers (Пока убрали чтобы сборки быстрее проходили)
          - echo "Билдим контейнеры через docker-compose"

          - docker-compose build

          # Поднимаем все контейнеры через docker-compose
          - echo "Поднимаем все контейнеры через docker-compose"
          - docker-compose up -d

          # Обновляем зависимости композера
          - echo "Обновляем зависимости composer"

          - docker-compose exec -T app composer install --no-interaction

    - step: &Test
        name: Tests (Applying migrations &Unit/Functional tests)
        services:
          - docker
        caches:
          - docker
#        runs-on:
#          - self.hosted
#          - linux
        script:
          # Экспортируем переменные зашитые в битбакет для развертки
          - echo "Экспоритруем переменные зашитые в битбакет для развертки"
          - echo DB_NAME=$DB_NAME > .env
          - echo DB_USER=$DB_USER >> .env
          - echo DB_PASSWORD=$DB_PASSWORD >> .env
          - echo REDIS_HOST=$REDIS_HOST >> .env
          - echo DB_DSN=$DB_DSN >> .env
          - echo DB_TEST_DSN=$DB_TEST_DSN >> .env
          - echo DB_TEST_CHARSET=$DB_TEST_CHARSET >> .env
          - echo DB_CHARSET=$DB_CHARSET >> .env
          - echo DOMAIN=$DOMAIN >> .env
          - echo DOMAIN_PROTOCOL=$DOMAIN_PROTOCOL >> .env
          - echo DB_TEST_NAME=$DB_TEST_NAME >> .env
          - echo DB_TEST_USER=$DB_TEST_USER >> .env
          - echo DB_TEST_PASSWORD=$DB_TEST_PASSWORD >> .env

          # Build docker containers (Пока убрали чтобы сборки быстрее проходили)
          - echo "Билдим контейнеры через docker-compose"

          - docker-compose build

          # Поднимаем все контейнеры через docker-compose
          - echo "Поднимаем все контейнеры через docker-compose"
          - docker-compose up -d

          - echo "Обновляем зависимости composer"

          # Обновляем зависимости композера
          - docker-compose exec -T app composer install --no-interaction

          - echo "Даем больше прав юзеру MySQL для создания триггеров"

          # Даем prod_user MySQL все необходимые права, а также создаем новую базу для миграций
          - docker exec -t db mysql -u root -p$DB_PASSWORD --execute "use dev_eft;
            CREATE DATABASE test_migrations_db;
            GRANT SUPER ON *.* to 'prod_user'@'%' WITH GRANT OPTION;
            GRANT ALL PRIVILEGES ON dev_eft.* to 'prod_user'@'%' WITH GRANT OPTION;
            GRANT ALL PRIVILEGES ON test_migrations_db.* to 'prod_user'@'%' WITH GRANT OPTION;"

          # Накатываем миграции на dev_eft
          - echo "Накатываем миграции на dev_eft"

          - docker-compose exec -T app php yii migrate --interactive=0

          # Накатываем миграции на test_migrations_db
          - echo "Накатываем миграции на test_migrations_db"

          - docker-compose exec -T app php yii migrate --db db_test --interactive=0;

          # Начинаем тестирование модульными и функциональными тестами
          - echo "Functional и Unit тестирование"

          - docker-compose exec -T app vendor/bin/codecept run

# Все виды конвейеров
pipelines:
#  default:
#  - step: *Build
#  - step: *Test

  # Кастомные экшены - дублируют основные
  custom:
    Build-action:
      - step: *Build
    Testing-action:
      - step: *Test

  # Автодеплой в мастер на Prod а также дополнительный прогон всех остальных тестов, как выше
  branches:
    master:
      - step:
          <<: *Build
          name: Build on Master (Docker-compose up & composer-update)
      - step:
          <<: *Test
          name: Tests on Master (Apply migrations & Unit/Functional tests)
#      - step:
#          image: atlassian/default-image:latest
#          name: Deploy master to Prod
#          runs-on:
#            - self.hosted
#            - linux
#          deployment: Production
#          script:
#            - mkdir -p ~/.ssh
#            - ssh-keyscan wiki-tarkov.ru >> ~/.ssh/known_hosts
#            - (umask  077 ; echo $MY_SSH_KEY | base64 --decode > ~/.ssh/id_rsa)
#            - ssh -i ~/.ssh/id_rsa $SSH_USER@wiki-tarkov.ru 'cd /var/www/wiki-tarkov/html && git pull origin master'
#            # Этого мы не делаем, т.к. изначально Prod накатывался SQL дампом
#            # - ssh -i ~/.ssh/id_rsa $SSH_USER@wiki-tarkov.ru 'cd /var/www/wiki-tarkov/html && php yii migrate --interactive=0'
#            - echo "Затянули ветку master с BitBucket успешно"