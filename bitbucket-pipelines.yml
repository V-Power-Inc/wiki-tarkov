# Bitbucket Pipeline file

# This template allows you to validate your PHP application.
# The workflow allows running tests and code linting on the default branch.
image: docker/compose:latest

options:
  docker: true

pipelines:
  branches:
    docker-release:
      - step:
          name: Build
          services:
            - docker
          caches:
            - docker
          runs-on:
            - self.hosted
            - linux
          script:
            # Экспоритруем переменные зашитые в битбакет для разветки
            - echo DB_NAME=$DB_NAME > .env
            - echo DB_USER=$DB_USER >> .env
            - echo DB_PASSWORD=$DB_PASSWORD >> .env
            - echo REDIS_HOST=$REDIS_HOST >> .env

            # Тестируем что смогли прочитать переменную из bitBucket
            - echo $REDIS_HOST

            - echo "Собираем Docker контейнеры"

            # Запускаем контейнеры приложения в фоновом режиме
            - docker-compose up -d

            - echo "Обновляем зависимости composer"

            # Обновляем зависимости композера
            - docker-compose exec -T app composer install --no-interaction

            # Накатываем миграции на dev_eft
            - docker-compose exec app php yii migrate --interactive=0

            # Создаем нового юзера MySQL и даем ему все необходимые права, а также создаем новую базу для миграций
            - docker-compose exec db mysql -u root -p $DB_PASSWORD
            - use dev_eft;
            - GRANT SUPER ON . to 'prod_user'@'%' WITH GRANT OPTION;
            - GRANT ALL PRIVILEGES ON dev_eft.* to 'prod_user'@'%' WITH GRANT OPTION; (Супер права)
            - CREATE DATABASE test_migrations_db;
            - GRANT SUPER ON . to 'prod_user'@'%' WITH GRANT OPTION;
            - GRANT ALL PRIVILEGES ON test_migrations_db.* to 'prod_user'@'%' WITH GRANT OPTION;
            - quit;

            # Накатываем миграции
            - docker-compose exec app php yii migrate --interactive=0