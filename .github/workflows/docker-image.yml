name: GitHub actions with repo

on:
  push:
    branches: [ "github-pipelines" ]
  pull_request:
    branches: [ "github-pipelines" ]

# Существующие задачи 
jobs:
  # Собираем проект
  build:
    runs-on: ubuntu-22.04
    steps:
    - uses: docker/compose@v3
    - name: Build (Docker-compose up & composer-update)
      run: |
        # Экспоритруем переменные зашитые в GitHub для развертки
          - echo "Экспоритруем переменные зашитые в битбакет для развертки"
          - echo DB_NAME=${{ secrets.DB_NAME }} > .env
          - echo DB_USER=${{ secrets.DB_USER }} >> .env
          - echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env

          # Build docker containers (Пока убрали чтобы сборки быстрее проходили)
          - echo "Билдим контейнеры через docker-compose"

          - docker-compose build

          # Поднимаем все контейнеры через docker-compose
          - echo "Поднимаем все контейнеры через docker-compose"
          - docker-compose up -d

          # Обновляем зависимости композера
          - echo "Обновляем зависимости composer"

          - docker-compose exec -T app composer install --no-interaction
  test:
    runs-on: ubuntu-22.04
    steps:
    - uses: docker/compose@v3
    - name: Tests (Applying migrations &Unit/Functional tests)
      run: |
        # Экспортируем переменные зашитые в GitHub для развертки
          - echo "Экспоритруем переменные зашитые в битбакет для развертки"
          - echo DB_NAME=${{ secrets.DB_NAME }} > .env
          - echo DB_USER=${{ secrets.DB_USER }} >> .env
          - echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          - echo REDIS_HOST=${{ secrets.REDIS_HOST }} >> .env
          - echo DB_DSN=${{ secrets.DB_DSN }} >> .env
          - echo DB_TEST_DSN=${{ secrets.DB_TEST_DSN }} >> .env
          - echo DB_TEST_CHARSET=${{ secrets.DB_TEST_CHARSET }} >> .env
          - echo DB_CHARSET=${{ secrets.DB_CHARSET }} >> .env
          - echo DOMAIN=${{ secrets.DOMAIN }} >> .env
          - echo DOMAIN_PROTOCOL=${{ secrets.DOMAIN_PROTOCOL }} >> .env
          - echo DB_TEST_NAME=${{ secrets.DB_TEST_NAME }} >> .env
          - echo DB_TEST_USER=${{ secrets.DB_TEST_USER }} >> .env
          - echo DB_TEST_PASSWORD=${{ secrets.DB_TEST_PASSWORD }} >> .env

          # Build docker containers (Пока убрали чтобы сборки быстрее проходили)
          - echo "Билдим контейнеры через docker-compose"

          - docker-compose build

          # Поднимаем все контейнеры через docker-compose
          - echo "Поднимаем все контейнеры через docker-compose"
          - docker-compose up -d

          - echo "Обновляем зависимости composer"

          # Обновляем зависимости композера
          - docker-compose exec -T app composer install --no-interaction

          - echo "Даем больше прав юзеру MySQL для создания триггеров"

          # Даем prod_user MySQL все необходимые права, а также создаем новую базу для миграций
          - docker exec -t db mysql -u root -p${{ secrets.DB_PASSWORD }} --execute "use dev_eft;
            CREATE DATABASE test_migrations_db;
            GRANT SUPER ON *.* to 'prod_user'@'%' WITH GRANT OPTION;
            GRANT ALL PRIVILEGES ON dev_eft.* to 'prod_user'@'%' WITH GRANT OPTION;
            GRANT ALL PRIVILEGES ON test_migrations_db.* to 'prod_user'@'%' WITH GRANT OPTION;"

          # Накатываем миграции на dev_eft
          - echo "Накатываем миграции на dev_eft"

          - docker-compose exec -T app php yii migrate --interactive=0

          # Накатываем миграции на test_migrations_db
          - echo "Накатываем миграции на test_migrations_db"

          - docker-compose exec -T app php yii migrate --db db_test --interactive=0;

          # Начинаем тестирование
          - echo "Functional и Unit тестирование"

          - echo "Проверка Unit тестами"

          - docker-compose exec -T app vendor/bin/codecept run unit

          # Теперь Functional - сначала самые проблемные
          - docker-compose exec -T app vendor/bin/codecept run tests/functional/PraporCest
          - docker-compose exec -T app vendor/bin/codecept run tests/functional/MirotvorecCest
          - docker-compose exec -T app vendor/bin/codecept run tests/functional/MehanicCest
          - docker-compose exec -T app vendor/bin/codecept run tests/functional/TerapevtCest
          - docker-compose exec -T app vendor/bin/codecept run tests/functional/LyjnicCest
          - docker-compose exec -T app vendor/bin/codecept run tests/functional/SkypshikCest
          - docker-compose exec -T app vendor/bin/codecept run tests/functional/BaraholshikCest
          - docker-compose exec -T app vendor/bin/codecept run tests/functional/EgerCest
          - docker-compose exec -T app vendor/bin/codecept run tests/functional/ItemsCest
          - docker-compose exec -T app vendor/bin/codecept run tests/functional/LootMainpageCest

          # Общий прогон функциональных тестов
          - echo "Проверка Functional тестами"

          - docker-compose exec -T app vendor/bin/codecept run functional
