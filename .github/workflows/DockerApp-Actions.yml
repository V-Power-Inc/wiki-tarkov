name: GitHub Actions

on:
  pull_request:
    branches:
      - "master"
      - "dev"

# –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ 
jobs:
  # –ü—Ä–æ–≥–æ–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç –Ω–∞ –ø–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π - Snyk
  snyk-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/php@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç –∏ –ø—Ä–æ–≥–æ–Ω—è–µ–º —Ç–µ—Å—Ç–∞–º–∏
  Tests:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('docker/php/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Install Docker and Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install docker-compose -y

      # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ Composer
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor/
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      - name: Set up environment variables
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          DB_DSN: ${{ secrets.DB_DSN }}
          DB_TEST_DSN: ${{ secrets.DB_TEST_DSN }}
          DB_TEST_CHARSET: ${{ secrets.DB_TEST_CHARSET }}
          DB_CHARSET: ${{ secrets.DB_CHARSET }}
          DOMAIN: ${{ secrets.DOMAIN }}
          DOMAIN_PROTOCOL: ${{ secrets.DOMAIN_PROTOCOL }}
          DB_TEST_NAME: ${{ secrets.DB_TEST_NAME }}
          DB_TEST_USER: ${{ secrets.DB_TEST_USER }}
          DB_TEST_PASSWORD: ${{ secrets.DB_TEST_PASSWORD }}
        run: |
          cat << EOF > .env
          DB_NAME="$DB_NAME"
          DB_USER="$DB_USER"
          DB_PASSWORD="$DB_PASSWORD"
          REDIS_HOST="$REDIS_HOST"
          DB_DSN="$DB_DSN"
          DB_TEST_DSN="$DB_TEST_DSN"
          DB_TEST_CHARSET="$DB_TEST_CHARSET"
          DB_CHARSET="$DB_CHARSET"
          DOMAIN="$DOMAIN"
          DOMAIN_PROTOCOL="$DOMAIN_PROTOCOL"
          DB_TEST_NAME="$DB_TEST_NAME"
          DB_TEST_USER="$DB_TEST_USER"
          DB_TEST_PASSWORD="$DB_TEST_PASSWORD"
          DEBUG_STATUS=true
          ENVIRONMENT=dev
          EOF

      # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–µ—à–∞ –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π
      - name: Check Docker cache before build
        run: |
          echo -e "\033[1;34müîç Checking Docker cache state...\033[0m"
          ls -la /tmp/.buildx-cache || echo -e "\033[1;33m‚ö†Ô∏è Cache directory is empty\033[0m"
          echo -e "\033[1;34müìä Cache size: \033[1;32m$(du -sh /tmp/.buildx-cache 2>/dev/null || echo '0')\033[0m"

      # –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
      - name: Build containers
        run: |
          echo -e "\033[1;34müèóÔ∏è Starting Docker build with cache...\033[0m"
          DOCKER_BUILDKIT=1 docker-compose build \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new \
            --progress=plain
          echo -e "\033[1;32m‚úÖ Build completed\033[0m"

      - name: Start containers
        run: docker-compose up -d

      # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      - name: Install Composer dependencies
        run: docker-compose exec -T app composer install --no-interaction --ignore-platform-reqs --prefer-dist --optimize-autoloader

      # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      - name: Configure database
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          echo -e "\033[1;34m‚è≥ Waiting for MySQL to be ready...\033[0m"
          for i in {1..30}; do
            if docker exec tarkov_db mysqladmin ping -h"localhost" -P"3306" -u"root" -p"$DB_PASSWORD" --silent; then
              echo -e "\033[1;32m‚úÖ MySQL is ready!\033[0m"
              break
            fi
            echo -e "\033[1;33m‚è≥ Waiting for MySQL to be ready... attempt $i/30\033[0m"
            sleep 2
          done

          echo -e "\033[1;34m‚öôÔ∏è Configuring database...\033[0m"
          docker exec -t tarkov_db mysql -h"localhost" -P"3306" -u"root" -p"$DB_PASSWORD" --execute "
            CREATE DATABASE IF NOT EXISTS test_migrations_db;
            GRANT SUPER ON *.* to 'prod_user'@'%' WITH GRANT OPTION;
            GRANT ALL PRIVILEGES ON dev_eft.* to 'prod_user'@'%' WITH GRANT OPTION;
            GRANT ALL PRIVILEGES ON test_migrations_db.* to 'prod_user'@'%' WITH GRANT OPTION;"

      # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π
      - name: Run migrations
        run: |
          echo -e "\033[1;34müîÑ Running migrations...\033[0m"
          docker-compose exec -T app php yii migrate --interactive=0
          docker-compose exec -T app php yii migrate --db db_test --interactive=0
          echo -e "\033[1;32m‚úÖ Migrations completed\033[0m"

      # –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
      - name: Clear Redis cache
        run: |
          echo -e "\033[1;34müßπ Clearing Redis cache...\033[0m"
          docker-compose exec -T redis redis-cli flushall
          echo -e "\033[1;32m‚úÖ Redis cache cleared\033[0m"

      # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
      - name: Run tests
        run: |
          echo -e "\033[1;34müî¨ Running tests...\033[0m"
          docker-compose exec -T app vendor/bin/codecept run
          echo -e "\033[1;32m‚úÖ Tests completed\033[0m"

      # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–µ—à–∞ –¥–æ–∫–µ—Ä–∞
      - name: Save Docker cache
        run: |
          echo -e "\033[1;34müíæ Saving Docker cache...\033[0m"
          mkdir -p /tmp/.buildx-cache-new
          if [ -d "/tmp/.buildx-cache" ]; then
            echo -e "\033[1;33müóëÔ∏è Removing old cache...\033[0m"
            rm -rf /tmp/.buildx-cache
          fi
          echo -e "\033[1;34müì¶ Moving new cache...\033[0m"
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          echo -e "\033[1;32müìä New cache size: $(du -sh /tmp/.buildx-cache 2>/dev/null || echo '0')\033[0m"