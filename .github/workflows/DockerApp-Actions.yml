name: GitHub Actions

on:
  pull_request:
    branches:
      - "master"
      - "dev"

# Существующие задачи 
jobs:
  # Прогоняем проект на поиск уязвимостей - Snyk
  snyk-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/php@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Собираем проект и прогоняем тестами
  Tests:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      
      # Настройка Docker и кеширования
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Install Docker and Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install docker-compose -y

      # Кеширование Composer
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor/
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      # Настройка переменных окружения
      - name: Set up environment variables
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          DB_DSN: ${{ secrets.DB_DSN }}
          DB_TEST_DSN: ${{ secrets.DB_TEST_DSN }}
          DB_TEST_CHARSET: ${{ secrets.DB_TEST_CHARSET }}
          DB_CHARSET: ${{ secrets.DB_CHARSET }}
          DOMAIN: ${{ secrets.DOMAIN }}
          DOMAIN_PROTOCOL: ${{ secrets.DOMAIN_PROTOCOL }}
          DB_TEST_NAME: ${{ secrets.DB_TEST_NAME }}
          DB_TEST_USER: ${{ secrets.DB_TEST_USER }}
          DB_TEST_PASSWORD: ${{ secrets.DB_TEST_PASSWORD }}
        run: |
          cat << EOF > .env
          DB_NAME="$DB_NAME"
          DB_USER="$DB_USER"
          DB_PASSWORD="$DB_PASSWORD"
          REDIS_HOST="$REDIS_HOST"
          DB_DSN="$DB_DSN"
          DB_TEST_DSN="$DB_TEST_DSN"
          DB_TEST_CHARSET="$DB_TEST_CHARSET"
          DB_CHARSET="$DB_CHARSET"
          DOMAIN="$DOMAIN"
          DOMAIN_PROTOCOL="$DOMAIN_PROTOCOL"
          DB_TEST_NAME="$DB_TEST_NAME"
          DB_TEST_USER="$DB_TEST_USER"
          DB_TEST_PASSWORD="$DB_TEST_PASSWORD"
          DEBUG_STATUS=true
          ENVIRONMENT=dev
          EOF

      # Проверка состояния кеша перед сборкой
      - name: Check Docker cache before build
        run: |
          echo -e "\033[1;34mChecking Docker cache state...\033[0m"
          ls -la /tmp/.buildx-cache || echo -e "\033[1;33mCache directory is empty\033[0m"
          echo -e "\033[1;34mCache size: \033[1;32m$(du -sh /tmp/.buildx-cache 2>/dev/null || echo '0')\033[0m"

      # Сборка и запуск контейнеров
      - name: Build containers
        run: |
          echo -e "\033[1;34mStarting Docker build with cache...\033[0m"
          DOCKER_BUILDKIT=1 docker-compose build \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new \
            --progress=plain
          echo -e "\033[1;32mBuild completed\033[0m"

      - name: Start containers
        run: docker-compose up -d

      # Установка зависимостей
      - name: Install Composer dependencies
        run: docker-compose exec -T app composer install --no-interaction --prefer-dist --optimize-autoloader

      # Настройка базы данных
      - name: Configure database
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          echo -e "\033[1;34mWaiting for MySQL to be ready...\033[0m"
          for i in {1..30}; do
            if docker exec tarkov_db mysqladmin ping -h"localhost" -P"3306" -u"root" -p"$DB_PASSWORD" --silent; then
              echo -e "\033[1;32mMySQL is ready!\033[0m"
              break
            fi
            echo -e "\033[1;33mWaiting for MySQL to be ready... attempt $i/30\033[0m"
            sleep 2
          done

          echo -e "\033[1;34mConfiguring database...\033[0m"
          docker exec -t tarkov_db mysql -h"localhost" -P"3306" -u"root" -p"$DB_PASSWORD" --execute "
            CREATE DATABASE IF NOT EXISTS test_migrations_db;
            GRANT SUPER ON *.* to 'prod_user'@'%' WITH GRANT OPTION;
            GRANT ALL PRIVILEGES ON dev_eft.* to 'prod_user'@'%' WITH GRANT OPTION;
            GRANT ALL PRIVILEGES ON test_migrations_db.* to 'prod_user'@'%' WITH GRANT OPTION;"

      # Применение миграций
      - name: Run migrations
        run: |
          echo -e "\033[1;34mRunning migrations...\033[0m"
          docker-compose exec -T app php yii migrate --interactive=0
          docker-compose exec -T app php yii migrate --db db_test --interactive=0
          echo -e "\033[1;32mMigrations completed\033[0m"

      # Очистка кеша
      - name: Clear Redis cache
        run: |
          echo -e "\033[1;34mClearing Redis cache...\033[0m"
          docker-compose exec -T redis redis-cli flushall
          echo -e "\033[1;32mRedis cache cleared\033[0m"

      # Запуск тестов
      - name: Run tests
        run: |
          echo -e "\033[1;34mRunning tests...\033[0m"
          docker-compose exec -T app vendor/bin/codecept run
          echo -e "\033[1;32mTests completed\033[0m"

      # Сохранение кеша докера
      - name: Save Docker cache
        run: |
          echo -e "\033[1;34mSaving Docker cache...\033[0m"
          mkdir -p /tmp/.buildx-cache-new
          if [ -d "/tmp/.buildx-cache" ]; then
            echo -e "\033[1;33mRemoving old cache...\033[0m"
            rm -rf /tmp/.buildx-cache
          fi
          echo -e "\033[1;34mMoving new cache...\033[0m"
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          echo -e "\033[1;32mNew cache size: $(du -sh /tmp/.buildx-cache 2>/dev/null || echo '0')\033[0m"